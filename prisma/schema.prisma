// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(uuid()) @db.Uuid
  email                String
  password             String
  name                 String
  phone                String?
  address              String?
  avatar               String?
  provider             Provider
  refreshTokenProvider String?

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.Uuid

  order         Order[]
  refreshTokens RefreshToken[]
  cart          Cart?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  id           String   @id @default(uuid()) @db.Uuid
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  device       String
  ip           String
  refreshToken String
  expiresAt    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, device, ip])
}

model Otp {
  email     String
  otp       Int
  expiresAt DateTime
  otpType   OTPType

  createdAt DateTime @default(now())

  @@id([email, otpType])
}

model Role {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?
  isActive    Boolean @default(true)

  users       User[]
  permissions Permission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id     String @id @default(uuid()) @db.Uuid
  name   String
  path   String
  method Method
  module Module

  roles Role[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([path, method])
}

model Product {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  images       String[]
  discount     Int          @default(0)
  discountType DiscountType @default(PERCENT)
  isActive     Boolean      @default(true)

  categoryId String?   @db.Uuid
  category   Category? @relation(fields: [categoryId], references: [id])
  variants   Variant[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Variant {
  id       String   @id @default(uuid()) @db.Uuid
  size     String
  color    String
  material String
  stock    Int      @default(0)
  price    Int
  images   String[]
  isActive Boolean  @default(true)

  productId String     @db.Uuid
  product   Product    @relation(fields: [productId], references: [id])
  cartItems CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?
  level       Int     @default(0)

  parentId String?    @db.Uuid
  parent   Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToCategory")
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
}

model Cart {
  id String @id @default(uuid()) @db.Uuid

  userId String     @unique @db.Uuid
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id       String @id @default(uuid()) @db.Uuid
  quantity Int    @default(1)

  cartId    String  @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [id])
  variantId String  @db.Uuid
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, variantId])
}

model Order {
  id           String        @id @default(uuid()) @db.Uuid
  items        OrderItem[]
  totalAmount  Int
  status       OrderStatus   @default(PENDING)
  discount     Int?          @default(0)
  discountType DiscountType? @default(PERCENT)

  paymentCode   Int           @unique @default(autoincrement())
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)

  trackingNumber  String?
  shippingAddress String
  shippingFee     Int

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model OrderItem {
  id       String @id @default(uuid()) @db.Uuid
  quantity Int

  //Product
  name         String
  description  String?
  discount     Int?          @default(0)
  discountType DiscountType? @default(PERCENT)

  //Variant
  size     String
  color    String
  material String
  stock    Int      @default(0)
  price    Int
  images   String[]

  orderId String @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@unique([name, size, color, material, orderId])
}

enum OTPType {
  SIGNUP
  FORGOT_PASSWORD
}

enum Provider {
  LOCAL
  GOOGLE
}

enum Module {
  AUTH
  FILE
  PERMISSION
  PRODUCT
  ROLE
  USER
  VARIANT
  CART
  ORDER
  CATEGORY
  CART_ITEM
  PAYMENT
}

enum Method {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENT
  MINUS
}
